p = predict(lmodel_binom.cv, as.matrix(data_set), s=best_lambda, type="response")
}
print(paste('optimal lambda:',round(log(best_lambda),2)))
coefs = coef(lmodel_binom.cv, s=best_lambda)
coefs_vec = as.vector(coefs)
names(coefs_vec) = rownames(coefs)
plot(lmodel_binom.cv,main='Regularized logistic regression - AUC') # plots misclassification error vs lambda
par(mar=c(6,5,3,3))
barplot(coefs_vec, main="Regularized logistic regression - coefficiants", xlab="",las=2, ylab="beta parameters")
fit <- data.frame(expression = target,predicted_expression = p[,1])
fit_exp <- fit[fit$expression == 1,]
fit_nonExp <- fit[fit$expression == 0,]
run_model <- function(data_set,target,best_alpha){
for(i in 1:200){
lmodel_binom.cv <- cv.glmnet(x = as.matrix(data_set), y = target, family='binomial',standardize=F,alpha=best_alpha,grouped=FALSE, nfolds=8, type.measure="auc")
best_lambdas <- append(best_lambdas,lmodel_binom.cv$lambda.min)
}
best_lambdas = sort(best_lambdas)
lmodel_binom.cv <- cv.glmnet(x = as.matrix(data_set), y = target, family='binomial',lambda=best_lambdas,standardize=F,alpha=best_alpha,grouped=FALSE, nfolds=8, type.measure="auc")
# On the test set
return(lmodel_binom.cv)
}
p = NaN
while(length(which(is.nan(p) == TRUE)) > 0){
lmodel_binom.cv = run_model(data_set,target,best_alpha)
best_lambda <- lmodel_binom.cv$lambda.min
p = predict(lmodel_binom.cv, as.matrix(data_set), s=best_lambda, type="response")
}
print(paste('optimal lambda:',round(log(best_lambda),2)))
coefs = coef(lmodel_binom.cv, s=best_lambda)
coefs_vec = as.vector(coefs)
names(coefs_vec) = rownames(coefs)
par(mar=c(6,5,3,3))
barplot(coefs_vec, main="Regularized logistic regression - coefficiants", xlab="",las=2, ylab="beta parameters")
plot(lmodel_binom.cv,main='Regularized logistic regression - AUC') # plots misclassification error vs lambda
fit <- data.frame(expression = target,predicted_expression = p[,1])
fit_exp <- fit[fit$expression == 1,]
fit_nonExp <- fit[fit$expression == 0,]
install.packages('ROCR',dep=T)
library(ROCR)
pred <- prediction(fit$predicted_expression, fit$expression)
perf <- performance(pred,"tpr","fpr")
plot(perf)
perf <- performance(pred,"auc")
perf
perf <- performance(pred,"acc")
perf
plot(perf)
perf <- performance(pred,"auc")
perf
perf@y.values
TP = c()
FP = c()
TN = c()
FN = c()
best_lambdas = c()
best_alpha = 0.5
index_0 = grep(0,target)
index_1 = grep(1,target)
run_model_TT <- function(data_set,target,best_alpha){
for(i in 1:200){
index = sort(c(sample(x=index_0, size=length(index_0)/2, replace=F),sample(x=index_1, size=length(index_1)/2, replace=F)))
lmodel_binom.cv <- cv.glmnet(x = as.matrix(data_set[index,]), y = target[index], family='binomial',standardize=F,alpha=best_alpha,grouped=FALSE, nfolds=8, type.measure="auc")
best_lambdas <- append(best_lambdas,lmodel_binom.cv$lambda.min)
}
best_lambdas = sort(best_lambdas)
index = sort(c(sample(x=index_0, size=length(index_0)/2, replace=F),sample(x=index_1, size=length(index_1)/2, replace=F)))
lmodel_binom.cv <- cv.glmnet(x = as.matrix(data_set[index,]), y = target[index], family='binomial',lambda=best_lambdas,standardize=F,alpha=best_alpha,grouped=FALSE, nfolds=8, type.measure="auc")
return(list(lmodel_binom.cv,index))
}
p = NaN
while(length(which(is.nan(p) == TRUE)) > 0){
param = run_model_TT(data_set,target,best_alpha)
lmodel_binom.cv = param[[1]]
index = param[[2]]
best_lambda <- lmodel_binom.cv$lambda.min
p = predict(lmodel_binom.cv, as.matrix(data_set[-index,]), s=best_lambda, type="response")
}
print(paste('optimal lambda:',round(log(best_lambda),2)))
coefs = coef(lmodel_binom.cv, s=best_lambda)
coefs_vec = as.vector(coefs)
names(coefs_vec) = rownames(coefs)
par(mar=c(6,5,3,3))
barplot(coefs_vec, main="Regularized logistic regression - coefficiants", xlab="",las=2, ylab="beta parameters")
fit <- data.frame(expression = target[-index],predicted_expression = p[,1])
fit_exp <- fit[fit$expression == 1,]
fit_nonExp <- fit[fit$expression == 0,]
plot(lmodel_binom.cv,main='Regularized logistic regression - AUC') # plots misclassification error vs lambda
predPerf = prediction(fit$predicted_expression, fit$expression)
perf = performance(pred,"auc")
text('center',unlist(perf@y.values))
?text
text(-4,unlist(perf@y.values))
perf = performance(pred,"auc")
perf@y.values
unlist(perf@y.values)
plot(lmodel_binom.cv,main='Regularized logistic regression - AUC') # plots misclassification error vs lambda
predPerf = prediction(fit$predicted_expression, fit$expression)
perf = performance(pred,"auc")
text(-4,unlist(perf@y.values))
unlist(perf@y.values)
print(paste('AUC:',as.character(unlist(perf@y.values))))
print(paste('AUC:',as.character(round(unlist(perf@y.values)),2)))
print(paste('AUC:',as.character(round(unlist(perf@y.values)),3)))
print(paste('AUC:',as.character(round(unlist(perf@y.values))),2))
print(paste('AUC:',as.character(round(unlist(perf@y.values),2))))
print(paste('AUC:',as.character(round(unlist(perf@y.values),2))))
perf <- performance(pred,"tpr","fpr")
plot(perf,type='l',lwd=2,col=colors[1],main='ROC curve', ylab='true positive rate', xlab='false positive rate')
plot(perf,type='l',lwd=2,col=colors[1],main='ROC')#, ylab='true positive rate', xlab='false positive rate')
#directories
input_directory = '/project/histone_marks_miRNA/histone_marks/data/HELA/'
output_directory = '/project/histone_marks_miRNA/histone_marks/logistic_regression/'
library(glmnet)
library(ROCR)
#mapping function
get_ID <- function(info,indexOfID){
info = unlist(strsplit(info,";"))[indexOfID]
info = unlist(strsplit(info,"="))[2]
return(info)
}
#load pre-miRNA HM data
#HM_dir = paste(input_directory,'histone_marks/pre_miRNA_HM_distribution_gff',sep='')
HM_dir = paste(input_directory,'histone_marks/pre_miRNA_300to100bp_HM_distribution_gff',sep='')
#HM_dir = paste(input_directory,'histone_marks/pre_miRNA_1000bp_HM_distribution_gff',sep='')
HM_subdirs = dir(path=HM_dir,full.names=T)
table_HM = read.table(file=list.files(path = HM_subdirs[1],pattern="*.bed",full.names=T),header=F,sep="\t")
ID = as.character(table_HM$V9)
data_HM = data.frame(ID=unlist(lapply(ID,get_ID,indexOfID=1)))
for(i in 1:length(HM_subdirs)){
table_HM = read.table(file=list.files(path = HM_subdirs[i],pattern="*.bed",full.names=T),header=F,sep="\t")
HM = unlist(strsplit(HM_subdirs[i],"/"))
HM = HM[length(HM)]
data_HM = cbind(data_HM,log(table_HM$V10+1))
colnames(data_HM)[i+1] = HM
}
#load mature-miRNA expression data
file = paste(input_directory,'expression/mature_miRNA_expression_RPKM/expression_values.txt',sep='')
table_expression = read.table(file=file,header=T,sep="\t")
ID = as.character(table_expression$group)
data_expression = data.frame(ID=unlist(lapply(ID,get_ID,indexOfID=2)))
data_expression = cbind(data_expression, table_expression[,10:11])
#merge data frames
data_merged = merge(data_expression,data_HM,by="ID")
data_filter = data_merged[data_merged$expression != 1, ]
print(paste('data set without low expressed miRNAs:', as.character(nrow(data_filter))))
data_filter$expression[data_filter$expression == 2] = TRUE
data_filter$expression[data_filter$expression == 0] = FALSE
data_set = data_filter[,4:length(data_filter)]
target = data_filter$expression
#normalization
for(j in 1:(ncol(data_set))){
data_set[,j] = (data_set[,j] - mean(data_set[,j])) / sd(data_set[,j])
}
head(data_set,4)
colors = rainbow(ncol(data_set))
thr_seq = seq(0.15,0.65,0.001)
TP = c()
FP = c()
TN = c()
FN = c()
rand_idx = sample(1:length(target),replace=F)
rand_target = target[rand_idx]
index_0 = grep(0,rand_target)
index_1 = grep(1,rand_target)
index = sort(c(sample(x=index_0, size=length(index_0)/2, replace=F),sample(x=index_1, size=length(index_1)/2, replace=F)))
training_target = rand_target[-index]
training_data_set = data_set[-index,]
index_0 = grep(0,training_target)
index_1 = grep(1,training_target)
test_label = rand_target[index]
test_set = data.frame(beta_values = data_set[index,])
for(i in 1:100){
index = sort(c(sample(x=index_0, size=length(index_0)/2, replace=F),sample(x=index_1, size=length(index_1)/2, replace=F)))
training_label = training_target[index]
training_set = data.frame(beta_values = training_data_set[index,])
log_reg = glm(training_label ~ .,training_set,family="binomial")
coefs = log_reg$coefficients
if(i == 1){coef_df = data.frame(coefs)}
else{coef_df = cbind(coef_df,coefs)}
}
rownames(coef_df) = c('(Intercept)',colnames(data_set))
coefs = rowMeans(coef_df)
log_reg$coefficients = coefs
par(mfrow=c(1,1),mar=c(6,3,3,1),oma=c(2,1,0,0))
barplot(coefs,las=2,main='Coefficients of logistic regression on random set')
p = predict(log_reg,newdata = test_set, type = "response")
fit = data.frame(target = test_label,predicted_expression = p)
fit_exp <- fit[fit$expression == 1,]
fit_nonExp <- fit[fit$expression == 0,]
plot(log_reg,main='Regularized logistic regression - AUC') # plots misclassification error vs lambda
predPerf = prediction(fit$predicted_expression, fit$target)
perf = performance(pred,"auc")
perf = performance(predPerf,"auc")
print(paste('AUC:',as.character(round(unlist(perf@y.values),2))))
for(thr in thr_seq){
TP = append(TP,sum(fit_exp$predicted_expression >= thr))
FP = append(FP,sum(fit_nonExp$predicted_expression >= thr))
TN = append(TN,sum(fit_nonExp$predicted_expression < thr))
FN = append(FN,sum(fit_exp$predicted_expression < thr))
}
true_pos_rate = TP / (TP + FN)
true_neg_rate = TN / (TN + FP)
mean_true_rate = rowMeans(data.frame(true_pos_rate,true_neg_rate))
distance = round(abs(true_pos_rate-true_neg_rate),2)
accuracy_df = data.frame(thr_seq = thr_seq, mean_true_rate = mean_true_rate, true_pos_rate = true_pos_rate, true_neg_rate = true_neg_rate, distance = distance)
accuracy_df = accuracy_df[order(-accuracy_df$mean_true_rate, accuracy_df$distance),]
for(i in 1:3){
print(paste('threshold for expressed miRNA:',accuracy_df$thr_seq[i]))
print(paste('    mean accuracy:',round(accuracy_df$mean_true_rate[i],2),'and distance:',accuracy_df$distance[i]))
print(paste('    true positive rate (expressed):',round(accuracy_df$true_pos_rate[i],2),' and true'
,'negative rate (non-expressed):',round(accuracy_df$true_neg_rate[i],2)))
print('')
}
perf <- performance(predPerf,"tpr","fpr")
plot(perf,type='l',lwd=2,col=colors[1],main='ROC')
TP = c()
FP = c()
TN = c()
FN = c()
index_0 = grep(0,target)
index_1 = grep(1,target)
index = sort(c(sample(x=index_0, size=length(index_0)/2, replace=F),sample(x=index_1, size=length(index_1)/2, replace=F)))
training_target = target[-index]
training_data_set = data_set[-index,]
index_0 = grep(0,training_target)
index_1 = grep(1,training_target)
test_label = target[index]
test_set = data.frame(beta_values = data_set[index,])
for(i in 1:100){
index = sort(c(sample(x=index_0, size=length(index_0)/2, replace=F),sample(x=index_1, size=length(index_1)/2, replace=F)))
training_label = training_target[index]
training_set = data.frame(beta_values = training_data_set[index,])
log_reg = glm(training_label ~ .,training_set,family="binomial")
coefs = log_reg$coefficients
if(i == 1){coef_df = data.frame(coefs)}
else{coef_df = cbind(coef_df,coefs)}
}
rownames(coef_df) = c('(Intercept)',colnames(data_set))
coefs = rowMeans(coef_df)
log_reg$coefficients = coefs
par(mfrow=c(1,1),mar=c(6,3,3,1),oma=c(2,1,0,0))
barplot(coefs,las=2,main='Coefficients of logistic regression on test and training set')
p = predict(log_reg,newdata = test_set, type = "response")
fit = data.frame(target = test_label,predicted_expression = p)
fit_exp <- fit[fit$expression == 1,]
fit_nonExp <- fit[fit$expression == 0,]
plot(log_reg,main='Regularized logistic regression - AUC') # plots misclassification error vs lambda
for(thr in thr_seq){
TP = append(TP,sum(fit_exp$predicted_expression >= thr))
FP = append(FP,sum(fit_nonExp$predicted_expression >= thr))
TN = append(TN,sum(fit_nonExp$predicted_expression < thr))
FN = append(FN,sum(fit_exp$predicted_expression < thr))
}
true_pos_rate = TP / (TP + FN)
true_neg_rate = TN / (TN + FP)
mean_true_rate = rowMeans(data.frame(true_pos_rate,true_neg_rate))
distance = round(abs(true_pos_rate-true_neg_rate),2)
accuracy_df = data.frame(thr_seq = thr_seq, mean_true_rate = mean_true_rate, true_pos_rate = true_pos_rate, true_neg_rate = true_neg_rate, distance = distance)
accuracy_df = accuracy_df[order(-accuracy_df$mean_true_rate, accuracy_df$distance),]
for(i in 1:3){
print(paste('threshold for expressed miRNA:',accuracy_df$thr_seq[i]))
print(paste('    mean accuracy:',round(accuracy_df$mean_true_rate[i],2),'and distance:',accuracy_df$distance[i]))
print(paste('    true positive rate (expressed):',round(accuracy_df$true_pos_rate[i],2),' and true'
,'negative rate (non-expressed):',round(accuracy_df$true_neg_rate[i],2)))
print('')
}
perf <- performance(pred,"tpr","fpr")
plot(perf,type='l',lwd=2,col=colors[1],main='ROC')
fit = data.frame(target = test_label,predicted_expression = p)
fit_exp <- fit[fit$expression == 1,]
fit_nonExp <- fit[fit$expression == 0,]
plot(log_reg,main='Regularized logistic regression - AUC') # plots misclassification error vs lambda
for(thr in thr_seq){
TP = append(TP,sum(fit_exp$predicted_expression >= thr))
FP = append(FP,sum(fit_nonExp$predicted_expression >= thr))
TN = append(TN,sum(fit_nonExp$predicted_expression < thr))
FN = append(FN,sum(fit_exp$predicted_expression < thr))
}
true_pos_rate = TP / (TP + FN)
true_neg_rate = TN / (TN + FP)
mean_true_rate = rowMeans(data.frame(true_pos_rate,true_neg_rate))
distance = round(abs(true_pos_rate-true_neg_rate),2)
accuracy_df = data.frame(thr_seq = thr_seq, mean_true_rate = mean_true_rate, true_pos_rate = true_pos_rate, true_neg_rate = true_neg_rate, distance = distance)
accuracy_df = accuracy_df[order(-accuracy_df$mean_true_rate, accuracy_df$distance),]
for(i in 1:3){
print(paste('threshold for expressed miRNA:',accuracy_df$thr_seq[i]))
print(paste('    mean accuracy:',round(accuracy_df$mean_true_rate[i],2),'and distance:',accuracy_df$distance[i]))
print(paste('    true positive rate (expressed):',round(accuracy_df$true_pos_rate[i],2),' and true'
,'negative rate (non-expressed):',round(accuracy_df$true_neg_rate[i],2)))
print('')
}
perf <- performance(predPerf,"tpr","fpr")
plot(perf,type='l',lwd=2,col=colors[1],main='ROC')
index_0 = grep(0,target)
index_1 = grep(1,target)
index = sort(c(sample(x=index_0, size=length(index_0)/2, replace=F),sample(x=index_1, size=length(index_1)/2, replace=F)))
training_target = target[-index]
training_data_set = data_set[-index,]
index_0 = grep(0,training_target)
index_1 = grep(1,training_target)
test_label = target[index]
test_set = data.frame(beta_values = data_set[index,])
for(i in 1:100){
index = sort(c(sample(x=index_0, size=length(index_0)/2, replace=F),sample(x=index_1, size=length(index_1)/2, replace=F)))
training_label = training_target[index]
training_set = data.frame(beta_values = training_data_set[index,])
log_reg = glm(training_label ~ .,training_set,family="binomial")
coefs = log_reg$coefficients
if(i == 1){coef_df = data.frame(coefs)}
else{coef_df = cbind(coef_df,coefs)}
}
rownames(coef_df) = c('(Intercept)',colnames(data_set))
coefs = rowMeans(coef_df)
log_reg$coefficients = coefs
par(mfrow=c(1,1),mar=c(6,3,3,1),oma=c(2,1,0,0))
barplot(coefs,las=2,main='Coefficients of logistic regression on test and training set')
p = predict(log_reg,newdata = test_set, type = "response")
fit = data.frame(target = test_label,predicted_expression = p)
fit_exp <- fit[fit$expression == 1,]
fit_nonExp <- fit[fit$expression == 0,]
plot(log_reg,main='Regularized logistic regression - AUC') # plots misclassification error vs lambda
for(thr in thr_seq){
TP = append(TP,sum(fit_exp$predicted_expression >= thr))
FP = append(FP,sum(fit_nonExp$predicted_expression >= thr))
TN = append(TN,sum(fit_nonExp$predicted_expression < thr))
FN = append(FN,sum(fit_exp$predicted_expression < thr))
}
true_pos_rate = TP / (TP + FN)
true_neg_rate = TN / (TN + FP)
mean_true_rate = rowMeans(data.frame(true_pos_rate,true_neg_rate))
distance = round(abs(true_pos_rate-true_neg_rate),2)
accuracy_df = data.frame(thr_seq = thr_seq, mean_true_rate = mean_true_rate, true_pos_rate = true_pos_rate, true_neg_rate = true_neg_rate, distance = distance)
accuracy_df = accuracy_df[order(-accuracy_df$mean_true_rate, accuracy_df$distance),]
for(i in 1:3){
print(paste('threshold for expressed miRNA:',accuracy_df$thr_seq[i]))
print(paste('    mean accuracy:',round(accuracy_df$mean_true_rate[i],2),'and distance:',accuracy_df$distance[i]))
print(paste('    true positive rate (expressed):',round(accuracy_df$true_pos_rate[i],2),' and true'
,'negative rate (non-expressed):',round(accuracy_df$true_neg_rate[i],2)))
print('')
}
perf <- performance(predPerf,"tpr","fpr")
plot(perf,type='l',lwd=2,col=colors[1],main='ROC')
TP = c()
FP = c()
TN = c()
FN = c()
index_0 = grep(0,target)
index_1 = grep(1,target)
index = sort(c(sample(x=index_0, size=length(index_0)/2, replace=F),sample(x=index_1, size=length(index_1)/2, replace=F)))
training_target = target[-index]
training_data_set = data_set[-index,]
index_0 = grep(0,training_target)
index_1 = grep(1,training_target)
test_label = target[index]
test_set = data.frame(beta_values = data_set[index,])
for(i in 1:100){
index = sort(c(sample(x=index_0, size=length(index_0)/2, replace=F),sample(x=index_1, size=length(index_1)/2, replace=F)))
training_label = training_target[index]
training_set = data.frame(beta_values = training_data_set[index,])
log_reg = glm(training_label ~ .,training_set,family="binomial")
coefs = log_reg$coefficients
if(i == 1){coef_df = data.frame(coefs)}
else{coef_df = cbind(coef_df,coefs)}
}
rownames(coef_df) = c('(Intercept)',colnames(data_set))
coefs = rowMeans(coef_df)
log_reg$coefficients = coefs
par(mfrow=c(1,1),mar=c(6,3,3,1),oma=c(2,1,0,0))
barplot(coefs,las=2,main='Coefficients of logistic regression on test and training set')
p = predict(log_reg,newdata = test_set, type = "response")
p
fit = data.frame(target = test_label,predicted_expression = p)
fit_exp <- fit[fit$expression == 1,]
fit_nonExp <- fit[fit$expression == 0,]
plot(log_reg,main='Regularized logistic regression - AUC') # plots misclassification error vs lambda
predPerf = prediction(fit$predicted_expression, fit$target)
perf = performance(predPerf,"auc")
print(paste('AUC:',as.character(round(unlist(perf@y.values),2))))
for(thr in thr_seq){
TP = append(TP,sum(fit_exp$predicted_expression >= thr))
FP = append(FP,sum(fit_nonExp$predicted_expression >= thr))
TN = append(TN,sum(fit_nonExp$predicted_expression < thr))
FN = append(FN,sum(fit_exp$predicted_expression < thr))
}
true_pos_rate = TP / (TP + FN)
true_neg_rate = TN / (TN + FP)
mean_true_rate = rowMeans(data.frame(true_pos_rate,true_neg_rate))
distance = round(abs(true_pos_rate-true_neg_rate),2)
accuracy_df = data.frame(thr_seq = thr_seq, mean_true_rate = mean_true_rate, true_pos_rate = true_pos_rate, true_neg_rate = true_neg_rate, distance = distance)
accuracy_df = accuracy_df[order(-accuracy_df$mean_true_rate, accuracy_df$distance),]
for(i in 1:3){
print(paste('threshold for expressed miRNA:',accuracy_df$thr_seq[i]))
print(paste('    mean accuracy:',round(accuracy_df$mean_true_rate[i],2),'and distance:',accuracy_df$distance[i]))
print(paste('    true positive rate (expressed):',round(accuracy_df$true_pos_rate[i],2),' and true'
,'negative rate (non-expressed):',round(accuracy_df$true_neg_rate[i],2)))
print('')
}
perf <- performance(predPerf,"tpr","fpr")
plot(perf,type='l',lwd=2,col=colors[1],main='ROC')
true_pos_rate
TP
fit = data.frame(target = test_label,predicted_expression = p)
fit_exp <- fit[fit$target == 1,]
fit_nonExp <- fit[fit$target == 0,]
predPerf = prediction(fit$predicted_expression, fit$target)
perf = performance(predPerf,"auc")
print(paste('AUC:',as.character(round(unlist(perf@y.values),2))))
for(thr in thr_seq){
TP = append(TP,sum(fit_exp$predicted_expression >= thr))
FP = append(FP,sum(fit_nonExp$predicted_expression >= thr))
TN = append(TN,sum(fit_nonExp$predicted_expression < thr))
FN = append(FN,sum(fit_exp$predicted_expression < thr))
}
true_pos_rate = TP / (TP + FN)
true_neg_rate = TN / (TN + FP)
mean_true_rate = rowMeans(data.frame(true_pos_rate,true_neg_rate))
distance = round(abs(true_pos_rate-true_neg_rate),2)
accuracy_df = data.frame(thr_seq = thr_seq, mean_true_rate = mean_true_rate, true_pos_rate = true_pos_rate, true_neg_rate = true_neg_rate, distance = distance)
accuracy_df = accuracy_df[order(-accuracy_df$mean_true_rate, accuracy_df$distance),]
for(i in 1:3){
print(paste('threshold for expressed miRNA:',accuracy_df$thr_seq[i]))
print(paste('    mean accuracy:',round(accuracy_df$mean_true_rate[i],2),'and distance:',accuracy_df$distance[i]))
print(paste('    true positive rate (expressed):',round(accuracy_df$true_pos_rate[i],2),' and true'
,'negative rate (non-expressed):',round(accuracy_df$true_neg_rate[i],2)))
print('')
}
perf <- performance(predPerf,"tpr","fpr")
plot(perf,type='l',lwd=2,col=colors[1],main='ROC')
TP = c()
FP = c()
TN = c()
FN = c()
index_0 = grep(0,target)
index_1 = grep(1,target)
index = sort(c(sample(x=index_0, size=length(index_0)/2, replace=F),sample(x=index_1, size=length(index_1)/2, replace=F)))
training_target = target[-index]
training_data_set = data_set[-index,]
index_0 = grep(0,training_target)
index_1 = grep(1,training_target)
test_label = target[index]
test_set = data.frame(beta_values = data_set[index,])
for(i in 1:100){
index = sort(c(sample(x=index_0, size=length(index_0)/2, replace=F),sample(x=index_1, size=length(index_1)/2, replace=F)))
training_label = training_target[index]
training_set = data.frame(beta_values = training_data_set[index,])
log_reg = glm(training_label ~ .,training_set,family="binomial")
coefs = log_reg$coefficients
if(i == 1){coef_df = data.frame(coefs)}
else{coef_df = cbind(coef_df,coefs)}
}
rownames(coef_df) = c('(Intercept)',colnames(data_set))
coefs = rowMeans(coef_df)
log_reg$coefficients = coefs
par(mfrow=c(1,1),mar=c(6,3,3,1),oma=c(2,1,0,0))
barplot(coefs,las=2,main='Coefficients of logistic regression on test and training set')
p = predict(log_reg,newdata = test_set, type = "response")
fit = data.frame(target = test_label,predicted_expression = p)
fit_exp <- fit[fit$target == 1,]
fit_nonExp <- fit[fit$target == 0,]
predPerf = prediction(fit$predicted_expression, fit$target)
perf = performance(predPerf,"auc")
print(paste('AUC:',as.character(round(unlist(perf@y.values),2))))
for(thr in thr_seq){
TP = append(TP,sum(fit_exp$predicted_expression >= thr))
FP = append(FP,sum(fit_nonExp$predicted_expression >= thr))
TN = append(TN,sum(fit_nonExp$predicted_expression < thr))
FN = append(FN,sum(fit_exp$predicted_expression < thr))
}
true_pos_rate = TP / (TP + FN)
true_neg_rate = TN / (TN + FP)
mean_true_rate = rowMeans(data.frame(true_pos_rate,true_neg_rate))
distance = round(abs(true_pos_rate-true_neg_rate),2)
accuracy_df = data.frame(thr_seq = thr_seq, mean_true_rate = mean_true_rate, true_pos_rate = true_pos_rate, true_neg_rate = true_neg_rate, distance = distance)
accuracy_df = accuracy_df[order(-accuracy_df$mean_true_rate, accuracy_df$distance),]
for(i in 1:3){
print(paste('threshold for expressed miRNA:',accuracy_df$thr_seq[i]))
print(paste('    mean accuracy:',round(accuracy_df$mean_true_rate[i],2),'and distance:',accuracy_df$distance[i]))
print(paste('    true positive rate (expressed):',round(accuracy_df$true_pos_rate[i],2),' and true'
,'negative rate (non-expressed):',round(accuracy_df$true_neg_rate[i],2)))
print('')
}
perf <- performance(predPerf,"tpr","fpr")
plot(perf,type='l',lwd=2,col=colors[1],main='ROC')
setwd('/project/histone_marks_miRNA/histone_marks/data/HELA/expression/mature_miRNA_expression_RPKM/')
table = read.table(file = './expression_values_expressed_miRNAs.txt',header=T)
head(table)
name = table$group
name
name = as.character(table$group)
name
get_ID <- function(info,indexOfID){
info = unlist(strsplit(info,";"))[indexOfID]
info = unlist(strsplit(info,"="))[2]
return(info)
}
lapply(name,get_ID,indexOfID=1)
unlist(lapply(name,get_ID,indexOfID=1))
new_name = unlist(lapply(name,get_ID,indexOfID=1))
write.table(new_name,file='../expressed_pre_miRNAs.txt',col.names=F,row.names=F,sep='\t')
write.table(new_name,file='../expressed_pre_miRNAs.txt',col.names=F,row.names=F,sep='\t',quote=F)
table = read.table(file = './expression_values_non_expressed_miRNAs.txt',header=T)
name = as.character(table$group)
new_name = unlist(lapply(name,get_ID,indexOfID=1))
head(new_name)
write.table(new_name,file='../expressed_pre_miRNAs.txt',col.names=F,row.names=F,sep='\t',quote=F)
write.table(new_name,file='../non_expressed_pre_miRNAs.txt',col.names=F,row.names=F,sep='\t',quote=F)
table = read.table(file = './expression_values_expressed_miRNAs.txt',header=T)
name = as.character(table$group)
new_name = unlist(lapply(name,get_ID,indexOfID=1))
head(new_name)
write.table(new_name,file='../expressed_pre_miRNAs.txt',col.names=F,row.names=F,sep='\t',quote=F)
