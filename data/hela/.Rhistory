mean_true_rate = rowMeans(data.frame(true_pos_rate,true_neg_rate))
distance = round(abs(true_pos_rate-true_neg_rate),2)
accuracy_df = data.frame(thr_seq = thr_seq, mean_true_rate = mean_true_rate, true_pos_rate = true_pos_rate, true_neg_rate = true_neg_rate, distance = distance)
accuracy_df = accuracy_df[order(-accuracy_df$mean_true_rate, accuracy_df$distance),]
for(i in 1:3){
print(paste('threshold for expressed miRNA:',accuracy_df$thr_seq[i]))
print(paste('    mean accuracy:',round(accuracy_df$mean_true_rate[i],2),'and distance:',accuracy_df$distance[i]))
print(paste('    true positive rate (expressed):',round(accuracy_df$true_pos_rate[i],2),' and true'
,'negative rate (non-expressed):',round(accuracy_df$true_neg_rate[i],2)))
print('')
}
perf <- performance(predPerf,"tpr","fpr")
plot(perf,type='l',lwd=2,col=colors[1],main='ROC')
#directories
input_directory = '/project/histone_marks_miRNA/histone_marks/data/HELA/'
output_directory = '/project/histone_marks_miRNA/histone_marks/logistic_regression/'
library(glmnet)
library(ROCR)
#mapping function
get_ID <- function(info,indexOfID,sep){
info = unlist(strsplit(info,";"))[indexOfID]
info = unlist(strsplit(info,sep))[2]
return(info)
}
#load pre-miRNA HM data
#HM_dir = paste(input_directory,'histone_marks/pre_miRNA_300to100bp_HM_distribution_gff',sep='')
#HM_dir = paste(input_directory,'histone_marks/pre_miRNA_1000bp_HM_distribution_gff',sep='')
HM_dir = paste(input_directory,'histone_marks/promoter_filtered_1000bp_HM_distribution_gff',sep='')
HM_subdirs = dir(path=HM_dir,full.names=T)
table_HM = read.table(file=list.files(path = HM_subdirs[1],pattern="*.bed",full.names=T),header=F,sep="\t")
ID = as.character(table_HM$V9)
data_HM = data.frame(name=unlist(lapply(ID,get_ID,indexOfID=1,sep=':')),start=table_HM$V4)#promoter
#data_HM = data.frame(ID=unlist(lapply(ID,get_ID,indexOfID=1,sep='=')),start=table_HM$V4)#miRNA
for(i in 1:length(HM_subdirs)){
table_HM = read.table(file=list.files(path = HM_subdirs[i],pattern="*.bed",full.names=T),header=F,sep="\t")
HM = unlist(strsplit(HM_subdirs[i],"/"))
HM = HM[length(HM)]
data_HM = cbind(data_HM,log(table_HM$V10+1))
colnames(data_HM)[i+2] = HM
}
#load pre-miRNA DNA methylation data
#file = paste(input_directory,'DNA_methylation/pre_miRNA_300to100bp_coverage/HAIB_HeLa-S3_fixed_Rep_1-hsa_pre_miRNA_300to100bp.gff',sep='')
#file = paste(input_directory,'DNA_methylation/pre_miRNA_1000bp_coverage/HAIB_HeLa-S3_fixed_Rep_1-hsa_pre_miRNA_1000bp.gff',sep='')
file = paste(input_directory,'DNA_methylation/promoter_filtered_consensus_coverage/HAIB_HeLa-S3_fixed_Rep_1-promoters_1000bp_filtered.gff',sep='')
table_DNA_meth = read.table(file=file,header=F,sep="\t")
ID = as.character(table_DNA_meth$V9)
data_DNA_meth = data.frame(name=unlist(lapply(ID,get_ID,indexOfID=1,sep=':')),start=table_DNA_meth$V4)#promoter
#data_DNA_meth = data.frame(ID=unlist(lapply(ID,get_ID,indexOfID=1,sep='=')),start=table_DNA_meth$V4)#miRNA
data_DNA_meth = cbind(data_DNA_meth, table_DNA_meth$V11)
data_DNA_meth = cbind(data_DNA_meth, table_DNA_meth$V10)
#colnames(data_DNA_meth) = c('ID','start','CpG','beta_value')#miRNA
colnames(data_DNA_meth) = c('name','start','CpG','beta_value')#promoter
#load mature-miRNA expression data
file = paste(input_directory,'expression/miRNA_expression_RPKM/expression_values.txt',sep='')
table_expression = read.table(file=file,header=T,sep="\t")
ID = as.character(table_expression$group)
data_miRNA_name = data.frame(name=unlist(lapply(ID,get_ID,indexOfID=1,sep='=')))
data_expression = data.frame(ID=unlist(lapply(ID,get_ID,indexOfID=2,sep='=')))
data_expression = cbind(data_expression, table_expression[,10:11],data_miRNA_name)
#merge data frames
#data_merged = merge(data_DNA_meth,data_HM,by=c("start",'ID'))#miRNA
#data_merged = merge(data_expression,data_merged,by="ID")#miRNA
data_merged = merge(data_DNA_meth,data_HM,by=c("start",'name'))#promoter
data_merged = merge(data_expression,data_merged,by="name")#promoter
data_filter = data_merged[data_merged$expression != 1, ]
print(paste('without low expressed miRNAs:', as.character(nrow(data_filter))))
data_filter$CpG = as.character(data_filter$CpG)
data_filter$CpG[data_filter$CpG == 'CpG'] = 1
data_filter$CpG[data_filter$CpG == 'non_CpG'] = 0
data_filter$expression[data_filter$expression == 2] = TRUE
data_filter$expression[data_filter$expression == 0] = FALSE
data_set = data_filter[,6:length(data_filter)]
target = data_filter$expression
#normalization
for(j in 2:(ncol(data_set))){ #column 1 is binary (Cpg/non-CpG)
data_set[,j] = (data_set[,j] - mean(data_set[,j])) / sd(data_set[,j])
}
head(data_set,4)
#directories
input_directory = '/project/histone_marks_miRNA/histone_marks/data/HELA/'
output_directory = '/project/histone_marks_miRNA/histone_marks/logistic_regression/'
library(glmnet)
library(ROCR)
#mapping function
get_ID <- function(info,indexOfID,sep){
info = unlist(strsplit(info,";"))[indexOfID]
info = unlist(strsplit(info,sep))[2]
return(info)
}
#load pre-miRNA HM data
#HM_dir = paste(input_directory,'histone_marks/pre_miRNA_300to100bp_HM_distribution_gff',sep='')
HM_dir = paste(input_directory,'histone_marks/pre_miRNA_1000bp_HM_distribution_gff',sep='')
HM_subdirs = dir(path=HM_dir,full.names=T)
table_HM = read.table(file=list.files(path = HM_subdirs[1],pattern="*.bed",full.names=T),header=F,sep="\t")
ID = as.character(table_HM$V9)
data_HM = data.frame(ID=unlist(lapply(ID,get_ID,indexOfID=1,sep='=')),start=table_HM$V4)#miRNA
for(i in 1:length(HM_subdirs)){
table_HM = read.table(file=list.files(path = HM_subdirs[i],pattern="*.bed",full.names=T),header=F,sep="\t")
HM = unlist(strsplit(HM_subdirs[i],"/"))
HM = HM[length(HM)]
data_HM = cbind(data_HM,log(table_HM$V10+1))
colnames(data_HM)[i+2] = HM
}
data_HM_miRNA = data_HM
data_HM = c()
#load promoter HM data
HM_dir = paste(input_directory,'histone_marks/promoter_filtered_1000bp_HM_distribution_gff',sep='')
HM_subdirs = dir(path=HM_dir,full.names=T)
table_HM = read.table(file=list.files(path = HM_subdirs[1],pattern="*.bed",full.names=T),header=F,sep="\t")
ID = as.character(table_HM$V9)
data_HM = data.frame(name=unlist(lapply(ID,get_ID,indexOfID=1,sep=':')),start=table_HM$V4)#promoter
for(i in 1:length(HM_subdirs)){
table_HM = read.table(file=list.files(path = HM_subdirs[i],pattern="*.bed",full.names=T),header=F,sep="\t")
HM = unlist(strsplit(HM_subdirs[i],"/"))
HM = HM[length(HM)]
data_HM = cbind(data_HM,log(table_HM$V10+1))
colnames(data_HM)[i+2] = HM
}
data_HM_promoter = data_HM
data_HM = c()
head(data_HM_miRNA)
head(data_HM_promoter)
#load pre-miRNA DNA methylation data
file = paste(input_directory,'DNA_methylation/promoter_filtered_consensus_coverage/HAIB_HeLa-S3_fixed_Rep_1-promoters_1000bp_filtered.gff',sep='')
table_DNA_meth = read.table(file=file,header=F,sep="\t")
ID = as.character(table_DNA_meth$V9)
data_DNA_meth = data.frame(ID=unlist(lapply(ID,get_ID,indexOfID=1,sep='=')),start=table_DNA_meth$V4)#miRNA
data_DNA_meth = cbind(data_DNA_meth, table_DNA_meth$V11)
data_DNA_meth = cbind(data_DNA_meth, table_DNA_meth$V10)
colnames(data_DNA_meth) = c('ID','start','CpG','beta_value')#miRNA
data_DNA_meth_miRNA = data_DNA_meth
data_DNA_meth = c()
#load promoter DNA methylation data
file = paste(input_directory,'DNA_methylation/promoter_filtered_consensus_coverage/HAIB_HeLa-S3_fixed_Rep_1-promoters_1000bp_filtered.gff',sep='')
table_DNA_meth = read.table(file=file,header=F,sep="\t")
ID = as.character(table_DNA_meth$V9)
data_DNA_meth = data.frame(name=unlist(lapply(ID,get_ID,indexOfID=1,sep=':')),start=table_DNA_meth$V4)#promoter
data_DNA_meth = cbind(data_DNA_meth, table_DNA_meth$V11)
data_DNA_meth = cbind(data_DNA_meth, table_DNA_meth$V10)
colnames(data_DNA_meth) = c('name','start','CpG','beta_value')#promoter
data_DNA_meth_promoter = data_DNA_meth
data_DNA_meth = c()
head(data_DNA_meth_miRNA)
table_DNA_meth = read.table(file=file,header=F,sep="\t")
head(data_DNA_meth_miRNA)
head(table_DNA_meth)
#load pre-miRNA DNA methylation data
file = paste(input_directory,'DNA_methylation/pre_miRNA_1000bp_coverage/HAIB_HeLa-S3_fixed_Rep_1-hsa_pre_miRNA_1000bp.gff',sep='')
table_DNA_meth = read.table(file=file,header=F,sep="\t")
ID = as.character(table_DNA_meth$V9)
data_DNA_meth = data.frame(ID=unlist(lapply(ID,get_ID,indexOfID=1,sep='=')),start=table_DNA_meth$V4)#miRNA
data_DNA_meth = cbind(data_DNA_meth, table_DNA_meth$V11)
data_DNA_meth = cbind(data_DNA_meth, table_DNA_meth$V10)
colnames(data_DNA_meth) = c('ID','start','CpG','beta_value')#miRNA
data_DNA_meth_miRNA = data_DNA_meth
data_DNA_meth = c()
#load promoter DNA methylation data
file = paste(input_directory,'DNA_methylation/promoter_filtered_consensus_coverage/HAIB_HeLa-S3_fixed_Rep_1-promoters_1000bp_filtered.gff',sep='')
table_DNA_meth = read.table(file=file,header=F,sep="\t")
ID = as.character(table_DNA_meth$V9)
data_DNA_meth = data.frame(name=unlist(lapply(ID,get_ID,indexOfID=1,sep=':')),start=table_DNA_meth$V4)#promoter
data_DNA_meth = cbind(data_DNA_meth, table_DNA_meth$V11)
data_DNA_meth = cbind(data_DNA_meth, table_DNA_meth$V10)
colnames(data_DNA_meth) = c('name','start','CpG','beta_value')#promoter
data_DNA_meth_promoter = data_DNA_meth
data_DNA_meth = c()
head(data_DNA_meth_miRNA)
head(data_DNA_meth_promoter)
#load mature-miRNA expression data
file = paste(input_directory,'expression/miRNA_expression_RPKM/expression_values.txt',sep='')
table_expression = read.table(file=file,header=T,sep="\t")
ID = as.character(table_expression$group)
data_miRNA_name = data.frame(name=unlist(lapply(ID,get_ID,indexOfID=1,sep='=')))
data_expression = data.frame(ID=unlist(lapply(ID,get_ID,indexOfID=2,sep='=')))
data_expression = cbind(data_expression, table_expression[,10:11],data_miRNA_name)
data_merged_miRNA = merge(data_DNA_meth,data_HM,by=c("start",'ID'))#miRNA
data_merged_miRNA = merge(data_DNA_meth_miRNA,data_HM_miRNA,by=c("start",'ID'))#miRNA
head(data_merged_miRNA)
data_merged_miRNA_exp = merge(data_expression,data_merged_miRNA,by="ID")#miRNA
head(data_merged_miRNA_exp)
a = data_merged_miRNA_exp[,!(colnames(data_merged_miRNA_exp) %in% c('start','ID'))]
a
head(a)
head(data_merged_miRNA_exp)
data_merged_promoter = merge(data_DNA_meth_promoter,data_HM_promoter,by=c("start",'name'))#promoter
a = data_merged_miRNA_exp[,!(colnames(data_merged_miRNA_exp) %in% c('start','ID'))]
head(data_merged_promoter)
a = data_merged_promoter[,!(colnames(data_merged_promoter) %in% c('start'))]
head(a)
data_merged_promoter = data_merged_promoter[,!(colnames(data_merged_promoter) %in% c('start'))]
head(data_merged_promoter)
data_merged = merge(data_merged_miRNA_exp,data_merged_promoter,by="name")#promoter
head(data_merged)
data_merged_miRNA = merge(data_DNA_meth_miRNA,data_HM_miRNA,by=c("start",'ID'))#miRNA
data_merged_miRNA_exp = merge(data_expression,data_merged_miRNA,by="ID")#miRNA
data_merged_miRNA_exp = data_merged_miRNA_exp[,!(colnames(data_merged_miRNA_exp) %in% c('start','ID'))]
data_merged_promoter = merge(data_DNA_meth_promoter,data_HM_promoter,by=c("start",'name'))#promoter
data_merged_promoter = data_merged_promoter[,!(colnames(data_merged_promoter) %in% c('start'))]
data_merged = merge(data_merged_miRNA_exp,data_merged_promoter,by="name")#promoter
head(data_merged)
#load pre-miRNA HM data
#HM_dir = paste(input_directory,'histone_marks/pre_miRNA_300to100bp_HM_distribution_gff',sep='')
HM_dir = paste(input_directory,'histone_marks/pre_miRNA_1000bp_HM_distribution_gff',sep='')
HM_subdirs = dir(path=HM_dir,full.names=T)
table_HM = read.table(file=list.files(path = HM_subdirs[1],pattern="*.bed",full.names=T),header=F,sep="\t")
ID = as.character(table_HM$V9)
data_HM = data.frame(ID=unlist(lapply(ID,get_ID,indexOfID=1,sep='=')),start=table_HM$V4)#miRNA
for(i in 1:length(HM_subdirs)){
table_HM = read.table(file=list.files(path = HM_subdirs[i],pattern="*.bed",full.names=T),header=F,sep="\t")
HM = unlist(strsplit(HM_subdirs[i],"/"))
HM = HM[length(HM)]
data_HM = cbind(data_HM,log(table_HM$V10+1))
colnames(data_HM)[i+2] = paste(HM,'miRNA',sep='_')
}
data_HM_miRNA = data_HM
data_HM = c()
#load promoter HM data
HM_dir = paste(input_directory,'histone_marks/promoter_filtered_1000bp_HM_distribution_gff',sep='')
HM_subdirs = dir(path=HM_dir,full.names=T)
table_HM = read.table(file=list.files(path = HM_subdirs[1],pattern="*.bed",full.names=T),header=F,sep="\t")
ID = as.character(table_HM$V9)
data_HM = data.frame(name=unlist(lapply(ID,get_ID,indexOfID=1,sep=':')),start=table_HM$V4)#promoter
for(i in 1:length(HM_subdirs)){
table_HM = read.table(file=list.files(path = HM_subdirs[i],pattern="*.bed",full.names=T),header=F,sep="\t")
HM = unlist(strsplit(HM_subdirs[i],"/"))
HM = HM[length(HM)]
data_HM = cbind(data_HM,log(table_HM$V10+1))
colnames(data_HM)[i+2] = paste(HM,'promoter',sep='_')
}
data_HM_promoter = data_HM
data_HM = c()
#load pre-miRNA DNA methylation data
file = paste(input_directory,'DNA_methylation/pre_miRNA_1000bp_coverage/HAIB_HeLa-S3_fixed_Rep_1-hsa_pre_miRNA_1000bp.gff',sep='')
table_DNA_meth = read.table(file=file,header=F,sep="\t")
ID = as.character(table_DNA_meth$V9)
data_DNA_meth = data.frame(ID=unlist(lapply(ID,get_ID,indexOfID=1,sep='=')),start=table_DNA_meth$V4)#miRNA
data_DNA_meth = cbind(data_DNA_meth, table_DNA_meth$V11)
data_DNA_meth = cbind(data_DNA_meth, table_DNA_meth$V10)
colnames(data_DNA_meth) = c('ID','start','CpG_miRNA','beta_value_miRNA')#miRNA
data_DNA_meth_miRNA = data_DNA_meth
data_DNA_meth = c()
#load promoter DNA methylation data
file = paste(input_directory,'DNA_methylation/promoter_filtered_consensus_coverage/HAIB_HeLa-S3_fixed_Rep_1-promoters_1000bp_filtered.gff',sep='')
table_DNA_meth = read.table(file=file,header=F,sep="\t")
ID = as.character(table_DNA_meth$V9)
data_DNA_meth = data.frame(name=unlist(lapply(ID,get_ID,indexOfID=1,sep=':')),start=table_DNA_meth$V4)#promoter
data_DNA_meth = cbind(data_DNA_meth, table_DNA_meth$V11)
data_DNA_meth = cbind(data_DNA_meth, table_DNA_meth$V10)
colnames(data_DNA_meth) = c('name','start','CpG_promoter','beta_value_promoter')#promoter
data_DNA_meth_promoter = data_DNA_meth
data_DNA_meth = c()
#load mature-miRNA expression data
file = paste(input_directory,'expression/miRNA_expression_RPKM/expression_values.txt',sep='')
table_expression = read.table(file=file,header=T,sep="\t")
ID = as.character(table_expression$group)
data_miRNA_name = data.frame(name=unlist(lapply(ID,get_ID,indexOfID=1,sep='=')))
data_expression = data.frame(ID=unlist(lapply(ID,get_ID,indexOfID=2,sep='=')))
data_expression = cbind(data_expression, table_expression[,10:11],data_miRNA_name)
data_merged_miRNA = merge(data_DNA_meth_miRNA,data_HM_miRNA,by=c("start",'ID'))#miRNA
data_merged_miRNA_exp = merge(data_expression,data_merged_miRNA,by="ID")#miRNA
data_merged_miRNA_exp = data_merged_miRNA_exp[,!(colnames(data_merged_miRNA_exp) %in% c('start','ID'))]
data_merged_promoter = merge(data_DNA_meth_promoter,data_HM_promoter,by=c("start",'name'))#promoter
data_merged_promoter = data_merged_promoter[,!(colnames(data_merged_promoter) %in% c('start'))]
data_merged = merge(data_merged_miRNA_exp,data_merged_promoter,by="name")#promoter
head(data_merged)
data_filter = data_merged[data_merged$expression != 1, ]
print(paste('without low expressed miRNAs:', as.character(nrow(data_filter))))
data_filter$CpG = as.character(data_filter$CpG)
data_filter$CpG[data_filter$CpG == 'CpG'] = 1
data_filter$CpG[data_filter$CpG == 'non_CpG'] = 0
data_filter$CpG[data_filter$CpG == 'CpG_promoter'] = 1
data_filter$CpG[data_filter$CpG == 'non_CpG_promoter'] = 0
data_filter$CpG[data_filter$CpG == 'CpG_miRNA'] = 1
data_filter$CpG[data_filter$CpG == 'non_CpG_miRNA'] = 0
data_filter$CpG[data_filter$CpG_promoter == 'CpG'] = 1
data_filter$CpG[data_filter$CpG_promoter == 'non_CpG'] = 0
data_filter$CpG[data_filter$CpG_miRNA == 'CpG'] = 1
data_filter$CpG[data_filter$CpG_miRNA == 'non_CpG'] = 0
head(data_filter)
data_filter$CpG[data_filter$CpG_miRNA == 'CpG'] = 1
data_filter$CpG[data_filter$CpG_miRNA == 'non_CpG'] = 0
head(data_filter)
data_merged_miRNA = merge(data_DNA_meth_miRNA,data_HM_miRNA,by=c("start",'ID'))#miRNA
data_merged_miRNA_exp = merge(data_expression,data_merged_miRNA,by="ID")#miRNA
data_merged_miRNA_exp = data_merged_miRNA_exp[,!(colnames(data_merged_miRNA_exp) %in% c('start','ID'))]
data_merged_promoter = merge(data_DNA_meth_promoter,data_HM_promoter,by=c("start",'name'))#promoter
data_merged_promoter = data_merged_promoter[,!(colnames(data_merged_promoter) %in% c('start'))]
data_merged = merge(data_merged_miRNA_exp,data_merged_promoter,by="name")#promoter
data_filter = data_merged[data_merged$expression != 1, ]
print(paste('without low expressed miRNAs:', as.character(nrow(data_filter))))
data_filter$CpG_promoter = as.character(data_filter$CpG_promoter)
data_filter$CpG_miRNA = as.character(data_filter$CpG_miRNA)
data_filter$CpG_promoter[data_filter$CpG_promoter == 'CpG'] = 1
data_filter$CpG_promoter[data_filter$CpG_promoter == 'non_CpG'] = 0
data_filter$CpG_miRNA[data_filter$CpG_miRNA == 'CpG'] = 1
data_filter$CpG_miRNA[data_filter$CpG_miRNA == 'non_CpG'] = 0
head(data_filter)
data_filter$expression[data_filter$expression == 2] = TRUE
data_filter$expression[data_filter$expression == 0] = FALSE
head(data_filter)
data_set = data_filter[,4:length(data_filter)]
target = data_filter$expression
head(data_set)
data_set[,j] = (data_set[,j] - mean(data_set[,j])) / sd(data_set[,j])
1 !=2
1 !=2 & 2 != 1
#normalization
for(j in 1:(ncol(data_set))){ #column 1 is binary (Cpg/non-CpG)
if(colname(data_set)[j] != 'CpG_promoter' & colname(data_set)[j] != 'CpG_miRNA'){
data_set[,j] = (data_set[,j] - mean(data_set[,j])) / sd(data_set[,j])
}
}
#normalization
for(j in 1:(ncol(data_set))){ #column 1 is binary (Cpg/non-CpG)
if(colnames(data_set)[j] != 'CpG_promoter' & colnames(data_set)[j] != 'CpG_miRNA'){
data_set[,j] = (data_set[,j] - mean(data_set[,j])) / sd(data_set[,j])
}
}
head(data_set,4)
colors = rainbow(ncol(data_set))
thr_seq = seq(0.15,0.65,0.001)
TP = c()
FP = c()
TN = c()
FN = c()
rand_idx = sample(1:length(target),replace=F)
rand_target = target[rand_idx]
index_0 = grep(0,rand_target)
index_1 = grep(1,rand_target)
index = sort(c(sample(x=index_0, size=length(index_0)/2, replace=F),sample(x=index_1, size=length(index_1)/2, replace=F)))
training_target = rand_target[-index]
training_data_set = data_set[-index,]
index_0 = grep(0,training_target)
index_1 = grep(1,training_target)
test_label = rand_target[index]
test_set = data.frame(beta_values = data_set[index,])
for(i in 1:100){
index = sort(c(sample(x=index_0, size=length(index_0)/2, replace=F),sample(x=index_1, size=length(index_1)/2, replace=F)))
training_label = training_target[index]
training_set = data.frame(beta_values = training_data_set[index,])
log_reg = glm(training_label ~ .,training_set,family="binomial")
coefs = log_reg$coefficients
if(i == 1){coef_df = data.frame(coefs)}
else{coef_df = cbind(coef_df,coefs)}
}
rownames(coef_df) = c('(Intercept)',colnames(data_set))
coefs = rowMeans(coef_df)
log_reg$coefficients = coefs
par(mfrow=c(1,1),mar=c(6,3,3,1),oma=c(2,1,0,0))
barplot(coefs,las=2,main='Coefficients of logistic regression on random set')
p = predict(log_reg,newdata = test_set, type = "response")
fit = data.frame(target = test_label,predicted_expression = p)
fit_exp <- fit[fit$target == 1,]
fit_nonExp <- fit[fit$target == 0,]
predPerf = prediction(fit$predicted_expression, fit$target)
perf = performance(predPerf,"auc")
print(paste('AUC:',as.character(round(unlist(perf@y.values),2))))
for(thr in thr_seq){
TP = append(TP,sum(fit_exp$predicted_expression >= thr))
FP = append(FP,sum(fit_nonExp$predicted_expression >= thr))
TN = append(TN,sum(fit_nonExp$predicted_expression < thr))
FN = append(FN,sum(fit_exp$predicted_expression < thr))
}
true_pos_rate = TP / (TP + FN)
true_neg_rate = TN / (TN + FP)
mean_true_rate = rowMeans(data.frame(true_pos_rate,true_neg_rate))
distance = round(abs(true_pos_rate-true_neg_rate),2)
accuracy_df = data.frame(thr_seq = thr_seq, mean_true_rate = mean_true_rate, true_pos_rate = true_pos_rate, true_neg_rate = true_neg_rate, distance = distance)
accuracy_df = accuracy_df[order(-accuracy_df$mean_true_rate, accuracy_df$distance),]
for(i in 1:3){
print(paste('threshold for expressed miRNA:',accuracy_df$thr_seq[i]))
print(paste('    mean accuracy:',round(accuracy_df$mean_true_rate[i],2),'and distance:',accuracy_df$distance[i]))
print(paste('    true positive rate (expressed):',round(accuracy_df$true_pos_rate[i],2),' and true'
,'negative rate (non-expressed):',round(accuracy_df$true_neg_rate[i],2)))
print('')
}
perf <- performance(predPerf,"tpr","fpr")
plot(perf,type='l',lwd=2,col=colors[1],main='ROC')
TP = c()
FP = c()
TN = c()
FN = c()
index_0 = grep(0,target)
index_1 = grep(1,target)
index = sort(c(sample(x=index_0, size=length(index_0)/2, replace=F),sample(x=index_1, size=length(index_1)/2, replace=F)))
training_target = target[-index]
training_data_set = data_set[-index,]
index_0 = grep(0,training_target)
index_1 = grep(1,training_target)
test_label = target[index]
test_set = data.frame(beta_values = data_set[index,])
for(i in 1:100){
index = sort(c(sample(x=index_0, size=length(index_0)/2, replace=F),sample(x=index_1, size=length(index_1)/2, replace=F)))
training_label = training_target[index]
training_set = data.frame(beta_values = training_data_set[index,])
log_reg = glm(training_label ~ .,training_set,family="binomial")
coefs = log_reg$coefficients
if(i == 1){coef_df = data.frame(coefs)}
else{coef_df = cbind(coef_df,coefs)}
}
rownames(coef_df) = c('(Intercept)',colnames(data_set))
coefs = rowMeans(coef_df)
log_reg$coefficients = coefs
par(mfrow=c(1,1),mar=c(6,3,3,1),oma=c(2,1,0,0))
barplot(coefs,las=2,main='Coefficients of logistic regression on test and training set')
p = predict(log_reg,newdata = test_set, type = "response")
fit = data.frame(target = test_label,predicted_expression = p)
fit_exp <- fit[fit$target == 1,]
fit_nonExp <- fit[fit$target == 0,]
predPerf = prediction(fit$predicted_expression, fit$target)
perf = performance(predPerf,"auc")
print(paste('AUC:',as.character(round(unlist(perf@y.values),2))))
for(thr in thr_seq){
TP = append(TP,sum(fit_exp$predicted_expression >= thr))
FP = append(FP,sum(fit_nonExp$predicted_expression >= thr))
TN = append(TN,sum(fit_nonExp$predicted_expression < thr))
FN = append(FN,sum(fit_exp$predicted_expression < thr))
}
true_pos_rate = TP / (TP + FN)
true_neg_rate = TN / (TN + FP)
mean_true_rate = rowMeans(data.frame(true_pos_rate,true_neg_rate))
distance = round(abs(true_pos_rate-true_neg_rate),2)
accuracy_df = data.frame(thr_seq = thr_seq, mean_true_rate = mean_true_rate, true_pos_rate = true_pos_rate, true_neg_rate = true_neg_rate, distance = distance)
accuracy_df = accuracy_df[order(-accuracy_df$mean_true_rate, accuracy_df$distance),]
for(i in 1:3){
print(paste('threshold for expressed miRNA:',accuracy_df$thr_seq[i]))
print(paste('    mean accuracy:',round(accuracy_df$mean_true_rate[i],2),'and distance:',accuracy_df$distance[i]))
print(paste('    true positive rate (expressed):',round(accuracy_df$true_pos_rate[i],2),' and true'
,'negative rate (non-expressed):',round(accuracy_df$true_neg_rate[i],2)))
print('')
}
perf <- performance(predPerf,"tpr","fpr")
plot(perf,type='l',lwd=2,col=colors[1],main='ROC')
TP = c()
FP = c()
TN = c()
FN = c()
best_lambdas = c()
best_alpha = 0.5
index_0 = grep(0,target)
index_1 = grep(1,target)
run_model_TT <- function(data_set,target,best_alpha){
for(i in 1:200){
index = sort(c(sample(x=index_0, size=length(index_0)/2, replace=F),sample(x=index_1, size=length(index_1)/2, replace=F)))
lmodel_binom.cv <- cv.glmnet(x = data.matrix(data_set[index,]), y = target[index], family='binomial',standardize=F,alpha=best_alpha,grouped=FALSE, nfolds=8, type.measure="auc")
best_lambdas <- append(best_lambdas,lmodel_binom.cv$lambda.min)
}
best_lambdas = sort(best_lambdas)
index = sort(c(sample(x=index_0, size=length(index_0)/2, replace=F),sample(x=index_1, size=length(index_1)/2, replace=F)))
lmodel_binom.cv <- cv.glmnet(x = data.matrix(data_set[index,]), y = target[index], family='binomial',lambda=best_lambdas,standardize=F,alpha=best_alpha,grouped=FALSE, nfolds=8, type.measure="auc")
return(list(lmodel_binom.cv,index))
}
p = NaN
while(length(which(is.nan(p) == TRUE)) > 0){
param = run_model_TT(data_set,target,best_alpha)
lmodel_binom.cv = param[[1]]
index = param[[2]]
best_lambda <- lmodel_binom.cv$lambda.min
p = predict(lmodel_binom.cv, data.matrix(data_set[-index,]), s=best_lambda, type="response")
}
print(paste('optimal lambda:',round(log(best_lambda),2)))
coefs = coef(lmodel_binom.cv, s=best_lambda)
coefs_vec = as.vector(coefs)
names(coefs_vec) = rownames(coefs)
par(mar=c(6,5,3,3))
barplot(coefs_vec, main="Regularized logistic regression - coefficiants", xlab="",las=2, ylab="beta parameters")
fit <- data.frame(expression = target[-index],predicted_expression = p[,1])
fit_exp <- fit[fit$expression == 1,]
fit_nonExp <- fit[fit$expression == 0,]
plot(lmodel_binom.cv,main='Regularized logistic regression - AUC') # plots misclassification error vs lambda
predPerf = prediction(fit$predicted_expression, fit$expression)
perf = performance(predPerf,"auc")
print(paste('AUC:',as.character(round(unlist(perf@y.values),2))))
for(thr in thr_seq){
TP = append(TP,sum(fit_exp$predicted_expression >= thr))
FP = append(FP,sum(fit_nonExp$predicted_expression >= thr))
TN = append(TN,sum(fit_nonExp$predicted_expression < thr))
FN = append(FN,sum(fit_exp$predicted_expression < thr))
}
true_pos_rate = TP / (TP + FN)
true_neg_rate = TN / (TN + FP)
mean_true_rate = rowMeans(data.frame(true_pos_rate,true_neg_rate))
distance = round(abs(true_pos_rate-true_neg_rate),2)
accuracy_df = data.frame(thr_seq = thr_seq, mean_true_rate = mean_true_rate, true_pos_rate = true_pos_rate, true_neg_rate = true_neg_rate, distance = distance)
accuracy_df = accuracy_df[order(-accuracy_df$mean_true_rate, accuracy_df$distance),]
for(i in 1:3){
print(paste('threshold for expressed miRNA:',accuracy_df$thr_seq[i]))
print(paste('    mean accuracy:',round(accuracy_df$mean_true_rate[i],2),'and distance:',accuracy_df$distance[i]))
print(paste('    true positive rate (expressed):',round(accuracy_df$true_pos_rate[i],2),' and true'
,'negative rate (non-expressed):',round(accuracy_df$true_neg_rate[i],2)))
print('')
}
perf <- performance(predPerf,"tpr","fpr")
plot(perf,type='l',lwd=2,col=colors[1],main='ROC')
model_binom <- glmnet(x = as.matrix(data_set[index,]), y = target[index], family='binomial',standardize=F,nlambda=200,alpha=best_alpha)
beta <- model_binom$beta
lambda <- log(model_binom$lambda)
par(mfrow=c(1,1),mar=c(4,4,6,4),oma=c(1,1,1,1))
plot(lambda,beta[1,],ylim=c(min(beta),max(beta)),cex=0.5,main='Regularized logistic regression - feature selection',col=colors[1],lty=1,type='l',xlab='lambda',ylab='beta values')
iLTY = 2
for(i in 2:nrow(beta)){
lines(lambda,beta[i,],cex=0.5,col=colors[i],lty=iLTY,type='l')
iLTY = iLTY + 1
if(iLTY > 3){iLTY = 1}
}
abline(v=log(best_lambda))
par(mfrow=c(1,1),mar=c(1,1,1,1),oma=c(0,0,0,0))
plot(1, type="n", axes=F, xlab="", ylab="",ylim=c(0,10),xlim=c(0,10))
legend('topleft',legend=colnames(data_set),col=colors,lty=c(1,2,3),ncol=3)
a = (1,1,2,3,4)
a = c(1,1,2,3,4)
unique(a)
